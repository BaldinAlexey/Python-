
Задание 1: Обработка данных о странах в функциональном
 стиле
 Требования к реализации:
 1. Загрузите список стран из файла countries.json
 2. Используя 
map() 
, создайте новый список, преобразовав названия всех стран к верхнему
 регистру
 3. Используя 
filter() 
, отфильтруйте страны:
 Содержащие подстроку 
'land'
 Имеющие ровно 6 символов в названии
 Содержащие 6 и более букв
 Начинающиеся с буквы 
'E'
 4. Используя 
reduce() 
, объедините страны Северной Европы в строку: "Финляндия,
 Швеция, Дания, Норвегия и Исландия являются странами Северной Европы"
 5. Реализуйте те же задачи без использования встроенных функций высшего порядка
 (только генераторы и циклы)
 6. Используя каррирование (через 
lambda 
), создайте функцию categorize_countries() 
,
 которая возвращает список стран по заданному шаблону ( 
'land' 
, 
'ia' 
, 
'island' 
,
 'stan' 
)
 7. Реализуйте ту же функциональность через замыкания
 # Пример каррирования
 categorize_curried = lambda pattern: lambda countries: [c for c in countries if
 pattern in c]
 land_countries = categorize_curried('land')(countries_list)
 8. Используя файл countries-data.json 
, реализуйте в функциональном стиле:
 Сортировку стран по названию, столице и населению
 Поиск 10 самых распространенных языков и стран, где на них говорят
 Вывод 10 самых населенных стран

 Задание 2: Генератор координат и графов для задачи
 коммивояжера и ее решение в 3D
 Требования к реализации:
 1. Реализуйте генератор случайных точек в трехмерном евклидовом пространстве:
 def generate_points(n: int, bounds: tuple = (0, 100))-> Generator[tuple,
 None, None]:
pass
 2. Реализуйте генератор "дорог" между точками:
 Поддерживайте как однонаправленные, так и двунаправленные связи
 Генерируйте расстояния между точками на основе евклидовой метрики
 3. Используйте генераторы для создания наборов данных разного размера (200, 500, 1000
 точек)
 # Пример использования
 points = list(generate_points(100))
 roads = list(generate_roads(points, bidirectional_ratio=0.7))
 4. Реализуйте основные компоненты муравьиного алгоритма (
 Википедия, 
Муравьиный алгоритм —
 Муравьиный алгоритм | Задача коммивояжёра / Хабр, 
Решение задачи коммивояжера / Хабр):
 Функцию расчета вероятности перехода между точками
 Функцию обновления феромонов
 Функцию испарения феромонов
 Муравьиный алгоритм.
 5. Используйте 
functools.partial
 для создания специализированных версий функций
 6. Примените 
map()
 и 
filter()
 для обработки путей муравьев
 7. Реализуйте основную логику алгоритма с использованием генераторов
 8. Реализуйте асинхронную корутину для визуализации процесса работы алгоритма:
 9. Используйте библиотеку matplotlib
 или 
plotly
 для отображения:
 Трехмерного графа точек
 Текущего лучшего маршрута
 Динамики изменения длины маршрута
 10. Реализуйте интерактивные элементы управления с помощью asyncio
 *
 Что примерно должно получиться:

Задание 3: Сравнительный анализ и метрики для алгоритма
 Требования к реализации:
 1. Создайте декоратор для измерения времени выполнения функций
 2. Используйте functools.lru_cache для мемоизации тяжелых вычислений
 3. Реализуйте pipeline обработки данных с помощью композиции функций
 4. Проведите сравнительный анализ алгоритма на наборах данных разного размера (200,
 500, 1000)
